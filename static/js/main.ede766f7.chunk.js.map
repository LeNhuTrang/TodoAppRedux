{"version":3,"sources":["assets/img/X2oObC4.png","store/actions/index.js","store/actions/type.js","TodoList/index.jsx","App.js","reportWebVitals.js","store/reducers/todoListReducer.js","index.js"],"names":["createAction","type","payload","actionType","TodoList","props","dispatch","useDispatch","useSelector","state","todoListReducer","taskList","taskEdit","useState","taskName","disabled","setState","activeTaskList","filter","task","done","doneTaskList","handleDelete","id","listAfterDeleted","className","src","image","value","name","onChange","e","target","placeholder","onClick","cloneTaskList","newTask","Date","now","console","log","alert","findIndex","item","push","cloneTaskEdit","index","onDragEnd","result","source","destination","droppableId","chosenTask","activeTasks","doneTasks","splice","newtasklist","concat","provided","droppableProps","ref","innerRef","map","i","draggableId","toString","draggableProps","dragHandleProps","handleEditTask","foundIndex","handleSetCompleted","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ede766f7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/X2oObC4.dfa77826.png\";","export let createAction = (type, payload) => {\n    return {\n      type,\n      payload,\n    };\n  };\n   ","export let actionType = {\n  SET_TASK: \"SET_TASK\",\n  EDIT_TASK: \"EDIT_TASK\",\n};\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./style.css\";\nimport image from \"../assets/img/X2oObC4.png\";\nimport { createAction } from \"../store/actions\";\nimport { actionType } from \"../store/actions/type\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\n\nconst TodoList = (props) => {\n  const dispatch = useDispatch();\n  const { taskList } = useSelector((state) => state.todoListReducer);\n  const { taskEdit } = useSelector((state) => state.todoListReducer);\n\n  const [state, setState] = useState({\n    taskName: \"\",\n    disabled: true,\n  });\n\n  let activeTaskList = taskList?.filter((task) => !task.done);\n  let doneTaskList = taskList?.filter((task) => task.done);\n\n  //Drag-drop logic:\n  const handleOnDragEnd = (result) => {\n    const { source, destination } = result;\n\n    if (!destination) return;\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    )\n      return;\n\n    //otherwise:\n    let chosenTask;\n    let activeTasks = activeTaskList;\n    let doneTasks = doneTaskList;\n\n    //drag a chosen task from list:\n    if (source.droppableId === \"activeTask\") {\n      chosenTask = activeTasks[source.index];\n\n      activeTasks.splice(source.index, 1);\n    } else {\n      chosenTask = doneTasks[source.index];\n      doneTasks.splice(source.index, 1);\n    }\n\n    //drop a chosen task into a new destination\n    if (destination.droppableId === \"activeTask\") {\n      activeTasks.splice(destination.index, 0, { ...chosenTask, done: false });\n      //assign activeTasks back to activeTaskList to update store below\n      activeTaskList = activeTasks;\n    } else {\n      doneTasks.splice(destination.index, 0, { ...chosenTask, done: true });\n      //assign doneTasks back to doneTaskList to update store below\n      doneTaskList = doneTasks;\n    }\n\n    //combine 2 lists to set new value for taskList\n    let newtasklist = activeTaskList.concat(doneTaskList);\n\n    //dispatch newtasklist as new value of taskList after dropping event. without these updating steps, when click edit btn, dropped tasks are sent back to the initial list as \"done\" in taskList was not updated\n    dispatch(createAction(actionType.SET_TASK, newtasklist));\n  };\n\n  //Add:\n  const handleAddTask = () => {\n    let { taskName } = state;\n\n    let cloneTaskList = [...taskList];\n\n    let newTask = {\n      id: Date.now(),\n      taskName,\n      done: false,\n    };\n\n    console.log(\"newtask\", newTask);\n\n    if (newTask.taskName === \"\") {\n      alert(\"Task name is required\");\n    }\n\n    let index = cloneTaskList.findIndex(\n      (item) => item.taskName === newTask.taskName\n    );\n\n    if (index === -1) {\n      cloneTaskList.push(newTask);\n    } else {\n      alert(\"Taskname already exists!\");\n      return cloneTaskList;\n    }\n\n    dispatch(createAction(actionType.SET_TASK, cloneTaskList));\n  };\n\n  const handleSetCompleted = (id) => {\n    let cloneTaskList = [...taskList];\n    let foundIndex = cloneTaskList.findIndex((item) => item.id === id);\n    if (foundIndex !== -1) cloneTaskList[foundIndex].done = true;\n\n    dispatch(createAction(actionType.SET_TASK, cloneTaskList));\n  };\n\n  const handleDelete = (id) => {\n    let cloneTaskList = [...taskList];\n    let listAfterDeleted = cloneTaskList.filter((task) => task.id !== id);\n\n    dispatch(createAction(actionType.SET_TASK, listAfterDeleted));\n  };\n\n  //Edit:\n  const handleEditTask = (task) => {\n    setState({ taskName: task.taskName, disabled: false });\n    dispatch(createAction(actionType.EDIT_TASK, task));\n  };\n\n  //Update:\n  const handleUpdateTask = () => {\n    let cloneTaskEdit = { ...taskEdit };\n    let cloneTaskList = [...taskList];\n\n    //đối chiếu task.id giữa taskList và taskEdit:\n    let index = cloneTaskList.findIndex((item) => item.id === cloneTaskEdit.id);\n\n    //nếu trùng task.id, gán taskname mới vào\n    if (index !== -1) {\n      cloneTaskList[index].taskName = state.taskName;\n    }\n\n    dispatch(createAction(actionType.SET_TASK, cloneTaskList));\n\n    setState({\n      disabled: true,\n      taskName: \"\",\n    });\n  };\n\n  return (\n    <div className=\"card\">\n      <div className=\"card__header\">\n        <img src={image} />\n      </div>\n\n      <div className=\"card__body\">\n        <div className=\"card__content\">\n          <div className=\"card__title\">\n            <h2>My Tasks</h2>\n          </div>\n          <div className=\"card__add\">\n            <input\n              value={state.taskName}\n              name=\"taskName\"\n              onChange={(e) => {\n                setState({\n                  taskName: e.target.value,\n                  disabled: state.disabled,\n                });\n              }}\n              id=\"newTask\"\n              type=\"text\"\n              placeholder=\"Enter an activity...\"\n            />\n            {state.disabled ? (\n              <button id=\"addItem\" onClick={handleAddTask}>\n                <i className=\"fa fa-plus\" />\n              </button>\n            ) : (\n              <button onClick={handleUpdateTask}>\n                <i className=\"fa fa-check\"></i>\n              </button>\n            )}\n          </div>\n          <DragDropContext onDragEnd={handleOnDragEnd}>\n            <div className=\"card__todo\">\n              {/* Uncompleted tasks */}\n              <Droppable droppableId=\"activeTask\">\n                {(provided) => (\n                  <ul\n                    className=\"todo\"\n                    id=\"todo\"\n                    {...provided.droppableProps}\n                    ref={provided.innerRef}\n                  >\n                    {activeTaskList.map((task, i) => {\n                      return (\n                        <Draggable\n                          key={task.id}\n                          draggableId={task.id.toString()}\n                          index={i}\n                        >\n                          {(provided) => (\n                            <li\n                              {...provided.draggableProps}\n                              {...provided.dragHandleProps}\n                              ref={provided.innerRef}\n                            >\n                              <span>{task.taskName}</span>\n                              <div className=\"buttons\">\n                                <button\n                                  className=\"complete\"\n                                  onClick={() => handleEditTask(task)}\n                                >\n                                  <i className=\"fa fa-edit\"></i>\n                                </button>\n                                <button\n                                  className=\"remove\"\n                                  onClick={() => handleDelete(task.id)}\n                                >\n                                  <i className=\"fa fa-trash-alt\" />\n                                </button>\n                                <button\n                                  className=\"complete\"\n                                  onClick={() => handleSetCompleted(task.id)}\n                                >\n                                  <i className=\"far fa-check-circle\" />\n                                </button>\n                              </div>\n                            </li>\n                          )}\n                        </Draggable>\n                      );\n                    })}\n                    {provided.placeholder}\n                  </ul>\n                )}\n              </Droppable>\n\n              {/* Completed tasks */}\n              <Droppable droppableId=\"doneTask\">\n                {(provided) => (\n                  <ul\n                    className=\"todo\"\n                    id=\"completed\"\n                    {...provided.droppableProps}\n                    ref={provided.innerRef}\n                  >\n                    {doneTaskList.map((task, i) => {\n                      return (\n                        <Draggable\n                          key={task.id}\n                          draggableId={task.id.toString()}\n                          index={i}\n                        >\n                          {(provided) => (\n                            <li\n                              {...provided.draggableProps}\n                              {...provided.dragHandleProps}\n                              ref={provided.innerRef}\n                            >\n                              <span>{task.taskName}</span>\n                              <div className=\"buttons\">\n                                <button\n                                  className=\"remove\"\n                                  onClick={() => handleDelete(task.id)}\n                                >\n                                  <i className=\"fa fa-trash-alt\" />\n                                </button>\n                              </div>\n                            </li>\n                          )}\n                        </Draggable>\n                      );\n                    })}\n                    {provided.placeholder}\n                  </ul>\n                )}\n              </Droppable>\n            </div>\n          </DragDropContext>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TodoList;\n","import TodoList from \"./TodoList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { actionType } from \"../actions/type\";\n\nconst initialState = {\n  taskList: [\n    { id: \"task-1\", taskName: \"Task 1\", done: true },\n    { id: \"task-2\", taskName: \"Task 2\", done: false },\n    { id: \"task-3\", taskName: \"Task 3\", done: true },\n    { id: \"task-4\", taskName: \"Task 4\", done: false },\n  ],\n  taskEdit: { id: \"\", taskName: \"\", done: false },\n};\n\nexport default (state = initialState, { type, payload }) => {\n  switch (type) {\n    case actionType.SET_TASK:\n      return { ...state, taskList: payload };\n    case actionType.EDIT_TASK:\n      return { ...state, taskEdit: payload };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { createStore, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport todoListReducer from \"./store/reducers/todoListReducer\"\n\n\nconst rootReducer = combineReducers({\n  todoListReducer\n});\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();"],"sourceRoot":""}